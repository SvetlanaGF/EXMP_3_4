<?php

// Задание 1: Определение простой функции и возвращаемые значения
// Инструкция: // Создайте функцию multiply,
// которая принимает два числа в качестве параметров,
// умножает их и возвращает результат.


echo "Задание 1: Определение простой функции и возвращаемые значения:\n";
function multiply($a, $b) {
    return $a * $b;
    }
echo multiply (3, 4);

echo "\n\n";


// Задание 2: Область видимости переменных
// Инструкция: Создайте переменную $globalVar с числом 50 за пределами функции. Внутри функции
// sumGlobal создайте локальную переменную $localVar со значением 100 и сложите ее с
// $globalVar. Выведите результат.
// Подсказка: Для доступа к глобальной переменной внутри функции используйте ключевое слово global.
// $globalVar = ______;
// function sumGlobal() {
// ______ $globalVar;
// $localVar = ______;
// return $globalVar + ______;
// }
// Пример вызова:
// echo sumGlobal(); // Ожидаемый результат: 150
echo "Задание 2: Область видимости переменных:\n";
$globalVar = 50;

function sumGlobal() {
    global $globalVar; // Доступ к глобальной переменной
    $localVar = 100;
    return $globalVar + $localVar;
}

echo sumGlobal();

echo "\n\n";
// Задание 3: Рекурсия
// Инструкция: Напишите рекурсивную функцию factorial , которая вычисляет факториал числа. Факториал
// числа n — это произведение всех чисел от 1 до n.
// Подсказка: Рекурсия — это вызов функции внутри самой себя. Не забудьте добавить условие для
// остановки рекурсии.
// function factorial($n) {
//     if ($n <= 1) {
//     return ______;
//     }
//     return $n * ______($n - ______);
//     }
//     Пример вызова:
//     echo factorial(5); // Ожидаемый результат: 120

echo "Задание 3: Рекурсия:\n";

function factorial($n) {
    if ($n <= 1) {
        return 1; // Условие остановки рекурсии
    }
    return $n * factorial($n - 1); // Рекурсивный вызов функции
}

echo factorial(5);

echo "\n\n";

// Задание 4: Анонимные функции
// Инструкция: Создайте анонимную функцию, которая принимает строку и выводит её в верхнем регистре.
// Передайте эту функцию в качестве аргумента для функции array_map для обработки массива строк.
// Подсказка: Анонимные функции можно определить без имени, используя function . Функция array_map
// принимает анонимную функцию и массив для обработки.
// $array = ["apple", "banana", "cherry"];
// $result = array_map(function(________) {
// return ______;
// }, ______);
// print_r($result);
// Пример вызова:
// print_r($result); // Ожидаемый результат: ["APPLE", "BANANA", "CHERRY"]
echo "Задание 4: Анонимные функции:\n";

$array = ["apple", "banana", "cherry"];
$result = array_map(function($str) {
    return strtoupper($str);
}, $array);

echo '[';
foreach ($result as $index => $value) { // Вывод результата
    echo '"' . $value . '"';
    if ($index < count($result) - 1) {
        echo ', ';
    }
}
echo ']';

echo "\n\n";

// Задание 5: Стрелочные функции
// Инструкция: Напишите стрелочную функцию, которая принимает два числа и возвращает их сумму.
// Подсказка: Стрелочные функции — это сокращённая форма анонимных функций, записываемая с помощью fn.
// $sum = fn(________) => ______;
// echo $sum(3, 4); // Ожидаемый результат: 7

echo "Задание 5: Стрелочные функции:\n";

$sum5 = fn($x, $y) => $x + $y;
echo $sum5(3, 4);

echo "\n\n";

// Задание 6: Замыкания / Closure
// Инструкция: Создайте функцию counter , которая возвращает замыкание. Замыкание должно увеличивать
// счётчик на 1 при каждом вызове.
// Подсказка: Замыкание сохраняет доступ к переменным, объявленным в его внешней области.
// function counter() {
// $count = ______;
// return function() use (________) {
// $count++;
// return ______;
// };
// }
// $myCounter = ______;
// echo $myCounter(); // Ожидаемый результат: 1
// echo $myCounter(); // Ожидаемый результат: 2

echo "Задание 6: Замыкания / Closure:\n";

function counter() {
    $count = 0;
    return function() use (&$count) {
        $count++;
        return $count;
    };
}

$myCounter = counter();
echo $myCounter() . "\n";
echo $myCounter();

echo "\n\n";

// Задание 7: Генераторы и оператор yield
// Инструкция: Напишите генератор, который возвращает числа от 1 до 5 с помощью оператора yield.
// Подсказка: Генераторы используют оператор yield вместо return для возврата значений по одному за раз.
// function generateNumbers() {
// for ($i = 1; $i <= 5; ______) {
// ______ $i;
// }
// }
// $generator = ______;
// foreach (________ as $number) {
// echo $number . " "; // Ожидаемый результат: 1 2 3 4 5
// }

echo "Задание 7: Генераторы и оператор yield:\n";

function generateNumbers() {
    for ($i = 1; $i <= 5; $i++) {
        yield $i;
    }
}

$generator = generateNumbers(); // Создание генератора
foreach ($generator as $number) {
    echo $number . " ";
}

echo "\n\n";

// Задание 8: Использование встроенных функций
// Инструкция: Используя встроенные функции PHP, найдите минимальное и максимальное значения в массиве чисел.
// Подсказка:  Используйте функции min() и max() для поиска минимальных и максимальных значений.
// $array = [3, 7, 2, 8, 4, 10, 1];
// $minValue = ______($array);
// $maxValue = ______($array);
// echo "Минимум: " . ______ . "\n"; // Ожидаемый результат: Минимум: 1
// echo "Максимум: " . ______ . "\n"; // Ожидаемый результат: Максимум: 10

echo "Задание 8: Использование встроенных функций:\n";

$array8 = [3, 7, 2, 8, 4, 10, 1];
$minValue = min($array8);
$maxValue = max($array8);

echo "Минимум: " . $minValue . "\n";
echo "Максимум: " . $maxValue . "\n";

echo "\n\n";